{"version":3,"sources":["./node_modules/ngxs-reset-plugin/__ivy_ngcc__/fesm2015/ngxs-reset-plugin.js","./node_modules/ngx-file-drop/__ivy_ngcc__/fesm2015/ngx-file-drop.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AACuF;AAClI;;AAEtC;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACwC;AACF;AACtC,0BAA0B;AAC1B,WAAW,EASV;AACD;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,WAAW,EAIV;AACD;AACA,YAAY;AACZ;AACA;AACA;AACA,gBAAgB;AAChB;AACA,WAAW,EAAE;AACb;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF,mCAAmC,gEAAyB,EAAE,kDAAkD;AAChH,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;AACtB,WAAW,EAGV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAkB,CAAC,qDAAS,GAAG,2DAAI;AACrD;AACA,oBAAoB;AACpB;AACA;AACA,2BAA2B,sEAAkB,CAAC,uDAAW;AACzD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,cAAc,qEAAqE;AAC7F;AACA;AACA,sDAAsD,gCAAgC,sDAAe,CAAC,mDAAc,GAAG,sDAAe,CAAC,iDAAY,GAAG,sDAAe,gBAAgB;AACrL,mCAAmC,gEAAyB,EAAE,kDAAkD;AAChH;AACA;AACA,KAAK,OAAO,mDAAO,EAAE;AACrB,KAAK,OAAO,iDAAK,EAAE;AACnB,KAAK;AACL;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,OAAO,mDAAc,EAAE,GAAG,OAAO,iDAAY,EAAE,GAAG,qBAAqB,EAAE,EAAE,QAAQ,EAAE;AACpH,WAAW,EAgBV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,+DAAS;AAC3D;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,+DAAS;AAC3D;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,kDAAkD,+DAAS;AAC3D;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,+CAA+C,+DAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAOV;AACD;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,6BAA6B,EAAE,gBAAgB,oEAAgB,aAAa,EAAE;AAC9E,eAAe,EAAE;AACjB;AACA;AACA;AACA,8CAA8C,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;A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ChC,IAAI,wDAAiB;AACrB,CAAC;AACD,+DAA+D;AAC/D,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,+DAA+D;AAC/D,2BAA2B,SAAS,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oGAAoG,uDAAuD,+DAAwB,CAAC,yDAAkB,GAAG;AACzM,yDAAyD,+DAAwB,EAAE,gGAAgG;AACnL;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB,gBAAgB,0CAA0C;AAC1D,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C,8BAA8B,0DAAY;AAC1C,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,oBAAoB,uBAAuB;AAC3C;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,wCAAwC,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,uDAAgB,GAAG;AACnM,0CAA0C,+DAAwB,EAAE,8IAA8I;AAClN,QAAQ,4DAAqB,mDAAmD,yDAAW;AAC3F,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,2DAA2D;AAClE,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,+UAA+U,YAAY,iFAAiF,8gBAA8gB;AAC58B,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,6EAA6E,8BAA8B,EAAE,sFAAsF,+BAA+B,EAAE,wFAAwF,gCAAgC,EAAE,wFAAwF,gCAAgC,EAAE;AACjf,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,mFAAmF,gCAAgC,EAAE;AA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","file":"default~receiver-receiver-module~sender-sender-module.js","sourcesContent":["import { Injectable, isDevMode, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { ofActionSuccessful, InitState, UpdateState, Actions, Store, getStoreMetadata, getValue, setValue, getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';\nimport { take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/internals.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngxs/store';\nfunction MetaDataModel() { }\nif (false) {\n    /** @type {?} */\n    MetaDataModel.prototype.name;\n    /** @type {?} */\n    MetaDataModel.prototype.defaults;\n    /** @type {?} */\n    MetaDataModel.prototype.path;\n    /** @type {?|undefined} */\n    MetaDataModel.prototype.children;\n}\n/**\n * a simplified implementation of NGXS StateClass interface\n * @record\n * @template T\n */\nfunction StateClass() { }\nif (false) {\n    /** @type {?|undefined} */\n    StateClass.prototype.NGXS_META;\n    /* Skipping unhandled member: new (...args: any[]): T;*/\n}\n/**\n * @return {?}\n */\nfunction noop() {\n    return (/**\n     * @return {?}\n     */\n    () => { });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/reset.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResetService {\n}\nResetService.ɵfac = function ResetService_Factory(t) { return new (t || ResetService)(); };\nResetService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ResetService, factory: ResetService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetService, [{\n        type: Injectable\n    }], null, null); })();\nif (false) {\n    /** @type {?} */\n    ResetService.prototype.initialState;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/reset.handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResetHandler {\n    /**\n     * @param {?} actions$\n     * @param {?} store\n     * @param {?} resetService\n     */\n    constructor(actions$, store, resetService) {\n        this.actions$ = actions$;\n        this.store = store;\n        this.resetService = resetService;\n        this.actions$\n            .pipe(ofActionSuccessful(InitState), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => (this.resetService.initialState = this.store.snapshot())));\n        this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ addedStates }) => (this.resetService.initialState = Object.assign(Object.assign({}, this.resetService.initialState), addedStates))));\n    }\n}\nResetHandler.ɵfac = function ResetHandler_Factory(t) { return new (t || ResetHandler)(ɵngcc0.ɵɵinject(ɵngcc1.Actions), ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ResetService)); };\nResetHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ResetHandler, factory: ResetHandler.ɵfac });\n/** @nocollapse */\nResetHandler.ctorParameters = () => [\n    { type: Actions },\n    { type: Store },\n    { type: ResetService }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetHandler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.Actions }, { type: ɵngcc1.Store }, { type: ResetService }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ResetHandler.prototype.actions$;\n    /**\n     * @type {?}\n     * @private\n     */\n    ResetHandler.prototype.store;\n    /**\n     * @type {?}\n     * @private\n     */\n    ResetHandler.prototype.resetService;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/symbols.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Action to clear all state except given state(s)\n */\nclass StateClear {\n    /**\n     * @param {...?} statesToKeep\n     */\n    constructor(...statesToKeep) {\n        /** @type {?} */\n        const reducer = createMetaDataListReducer(isDevMode());\n        this.statesToKeep = statesToKeep.reduce(reducer, []);\n    }\n}\nStateClear.type = '@@CLEAR_STATE';\nif (false) {\n    /** @type {?} */\n    StateClear.type;\n    /** @type {?} */\n    StateClear.prototype.statesToKeep;\n}\n/**\n * Action to reset given state(s) to defaults\n */\nclass StateReset {\n    /**\n     * @param {...?} statesToReset\n     */\n    constructor(...statesToReset) {\n        /** @type {?} */\n        const reducer = createMetaDataListReducer(isDevMode());\n        this.statesToReset = statesToReset.reduce(reducer, []);\n    }\n}\nStateReset.type = '@@RESET_STATE';\nif (false) {\n    /** @type {?} */\n    StateReset.type;\n    /** @type {?} */\n    StateReset.prototype.statesToReset;\n}\n/**\n * Action to reset all states expect given state(s) to defaults\n */\nclass StateResetAll {\n    /**\n     * @param {...?} statesToKeep\n     */\n    constructor(...statesToKeep) {\n        /** @type {?} */\n        const reducer = createMetaDataListReducer(isDevMode());\n        this.statesToKeep = statesToKeep.reduce(reducer, []);\n    }\n}\nStateResetAll.type = '@@RESET_STATE_ALL';\nif (false) {\n    /** @type {?} */\n    StateResetAll.type;\n    /** @type {?} */\n    StateResetAll.prototype.statesToKeep;\n}\n/**\n * Action to overwrite state(s) with given value(s)\n */\nclass StateOverwrite {\n    /**\n     * @param {...?} overwriteConfigs\n     */\n    constructor(...overwriteConfigs) {\n        /** @type {?} */\n        const reducer = createMetaTupleReducer(isDevMode());\n        const [states, values] = overwriteConfigs.reduce(reducer, [\n            [],\n            [],\n        ]);\n        this.statesToOverwrite = states;\n        this.values = values;\n    }\n}\nStateOverwrite.type = '@@OVERWRITE_STATE';\nif (false) {\n    /** @type {?} */\n    StateOverwrite.type;\n    /** @type {?} */\n    StateOverwrite.prototype.statesToOverwrite;\n    /** @type {?} */\n    StateOverwrite.prototype.values;\n}\n/**\n * @param {?} state\n * @param {?} devMode\n * @return {?}\n */\nfunction getMetaData(state, devMode) {\n    /** @type {?} */\n    const meta = (/** @type {?} */ (new Object(getStoreMetadata((/** @type {?} */ (state))))));\n    /** @type {?} */\n    const isNgxsMeta = meta.name && 'defaults' in meta;\n    // Reusability Hack: devMode is number on purpose\n    if (!isNgxsMeta && devMode === -2) {\n        console.warn(`Reset Plugin Warning: ${meta.name} is not a state class.`);\n        return null;\n    }\n    return meta;\n}\n/**\n * @param {?} devMode\n * @return {?}\n */\nfunction createMetaDataListReducer(devMode) {\n    return (/**\n     * @param {?} acc\n     * @param {?} state\n     * @return {?}\n     */\n    (acc, state) => {\n        // tslint:disable-next-line:no-bitwise\n        /** @type {?} */\n        const meta = getMetaData(state, ~devMode);\n        return meta ? acc.concat(meta) : acc;\n    });\n}\n/**\n * @param {?} devMode\n * @return {?}\n */\nfunction createMetaTupleReducer(devMode) {\n    return (/**\n     * @param {?} acc\n     * @param {?} __1\n     * @return {?}\n     */\n    (acc, [state, value]) => {\n        // tslint:disable-next-line:no-bitwise\n        /** @type {?} */\n        const meta = getMetaData(state, ~devMode);\n        return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/reset.plugin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxsResetPlugin {\n    /**\n     * @param {?} resetService\n     */\n    constructor(resetService) {\n        this.resetService = resetService;\n    }\n    /**\n     * @private\n     * @param {?} state\n     * @param {?} statesToKeep\n     * @return {?}\n     */\n    clearStates(state, statesToKeep) {\n        return statesToKeep.reduce((/**\n         * @param {?} obj\n         * @param {?} meta\n         * @return {?}\n         */\n        (obj, meta) => {\n            /** @type {?} */\n            const path = getPath(meta);\n            if (!path) {\n                return obj;\n            }\n            /** @type {?} */\n            const parts = path.split('.');\n            /** @type {?} */\n            const value = getValue(state, path);\n            return parts.reduceRight((/**\n             * @param {?} acc\n             * @param {?} part\n             * @return {?}\n             */\n            (acc, part) => part in obj\n                ? {\n                    [part]: Object.assign(Object.assign({}, obj[part]), acc),\n                }\n                : { [part]: acc }), value);\n        }), {});\n    }\n    /**\n     * @private\n     * @param {?} state\n     * @param {?} statesToOverwrite\n     * @param {?} values\n     * @return {?}\n     */\n    overwriteStates(state, statesToOverwrite, values) {\n        statesToOverwrite.forEach((/**\n         * @param {?} meta\n         * @param {?} index\n         * @return {?}\n         */\n        (meta, index) => {\n            /** @type {?} */\n            const path = getPath(meta);\n            if (!path) {\n                return;\n            }\n            state = setValue(state, path, values[index]);\n        }));\n        return state;\n    }\n    /**\n     * @private\n     * @param {?} state\n     * @param {?} statesToReset\n     * @return {?}\n     */\n    resetStates(state, statesToReset) {\n        statesToReset.forEach((/**\n         * @param {?} meta\n         * @return {?}\n         */\n        (meta) => {\n            /** @type {?} */\n            const path = getPath(meta);\n            if (!path) {\n                return;\n            }\n            state = setValue(state, path, typeof meta.defaults === 'undefined' ? {} : meta.defaults);\n            if (meta.children) {\n                state = this.resetStates(state, (/** @type {?} */ (meta.children.map(getMetaData))));\n            }\n        }));\n        return state;\n    }\n    /**\n     * @private\n     * @param {?} state\n     * @param {?} statesToKeep\n     * @return {?}\n     */\n    resetStatesAll(state, statesToKeep) {\n        const [metas, values] = statesToKeep.reduce((/**\n         * @param {?} acc\n         * @param {?} meta\n         * @return {?}\n         */\n        (acc, meta) => {\n            /** @type {?} */\n            const path = getPath(meta);\n            if (!path) {\n                return acc;\n            }\n            acc[0].push(meta);\n            acc[1].push(getValue(state, path));\n            return acc;\n        }), [[], []]);\n        return this.overwriteStates(this.resetService.initialState, metas, values);\n    }\n    /**\n     * @param {?} state\n     * @param {?} action\n     * @param {?} next\n     * @return {?}\n     */\n    handle(state, action, next) {\n        /** @type {?} */\n        const type = getActionTypeFromInstance(action);\n        switch (type) {\n            case StateClear.type:\n                state = this.clearStates(state, ((/** @type {?} */ (action))).statesToKeep);\n                break;\n            case StateReset.type:\n                state = this.resetStates(state, ((/** @type {?} */ (action))).statesToReset);\n                break;\n            case StateResetAll.type:\n                state = this.resetStatesAll(state, ((/** @type {?} */ (action))).statesToKeep);\n                break;\n            case StateOverwrite.type:\n                const { statesToOverwrite, values } = (/** @type {?} */ (action));\n                state = this.overwriteStates(state, statesToOverwrite, values);\n                break;\n            default:\n                break;\n        }\n        return next(state, action);\n    }\n}\nNgxsResetPlugin.ɵfac = function NgxsResetPlugin_Factory(t) { return new (t || NgxsResetPlugin)(ɵngcc0.ɵɵinject(ResetService)); };\nNgxsResetPlugin.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxsResetPlugin, factory: NgxsResetPlugin.ɵfac });\n/** @nocollapse */\nNgxsResetPlugin.ctorParameters = () => [\n    { type: ResetService }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxsResetPlugin, [{\n        type: Injectable\n    }], function () { return [{ type: ResetService }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxsResetPlugin.prototype.resetService;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction getPath(meta) {\n    return meta.path;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/reset.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxsResetPluginModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: NgxsResetPluginModule,\n            providers: [\n                ResetService,\n                ResetHandler,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: noop,\n                    deps: [ResetHandler],\n                    multi: true,\n                },\n                {\n                    provide: NGXS_PLUGINS,\n                    useClass: NgxsResetPlugin,\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nNgxsResetPluginModule.ɵfac = function NgxsResetPluginModule_Factory(t) { return new (t || NgxsResetPluginModule)(); };\nNgxsResetPluginModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxsResetPluginModule });\nNgxsResetPluginModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxsResetPluginModule, [{\n        type: NgModule\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngxs-reset-plugin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxsResetPlugin, NgxsResetPluginModule, StateClear, StateOverwrite, StateReset, StateResetAll, getMetaData, ResetService as ɵa, ResetHandler as ɵb, noop as ɵd };\n\n//# sourceMappingURL=ngxs-reset-plugin.js.map","import { Directive, TemplateRef, EventEmitter, Component, NgZone, Renderer2, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"fileSelector\"];\nfunction NgxFileDropComponent_ng_template_4_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.dropZoneLabel);\n} }\nfunction NgxFileDropComponent_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"input\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxFileDropComponent_ng_template_4_div_1_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.openFileSelector($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate(\"value\", ctx_r5.browseBtnLabel);\n    ɵngcc0.ɵɵproperty(\"className\", ctx_r5.browseBtnClassName);\n} }\nfunction NgxFileDropComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NgxFileDropComponent_ng_template_4_div_0_Template, 2, 1, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(1, NgxFileDropComponent_ng_template_4_div_1_Template, 2, 2, \"div\", 7);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.dropZoneLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.showBrowseBtn);\n} }\nfunction NgxFileDropComponent_ng_template_6_Template(rf, ctx) { }\nconst _c1 = function (a0) { return { openFileSelector: a0 }; };\nclass NgxFileDropEntry {\r\n    constructor(relativePath, fileEntry) {\r\n        this.relativePath = relativePath;\r\n        this.fileEntry = fileEntry;\r\n    }\r\n}\n\nclass NgxFileDropContentTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n}\nNgxFileDropContentTemplateDirective.ɵfac = function NgxFileDropContentTemplateDirective_Factory(t) { return new (t || NgxFileDropContentTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nNgxFileDropContentTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NgxFileDropContentTemplateDirective, selectors: [[\"\", \"ngx-file-drop-content-tmp\", \"\"]] });\r\nNgxFileDropContentTemplateDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxFileDropContentTemplateDirective, [{\n        type: Directive,\n        args: [{ selector: '[ngx-file-drop-content-tmp]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\nclass NgxFileDropComponent {\r\n    constructor(zone, renderer) {\r\n        this.zone = zone;\r\n        this.renderer = renderer;\r\n        this.accept = '*';\r\n        this.directory = false;\r\n        this.multiple = true;\r\n        this.dropZoneLabel = '';\r\n        this.dropZoneClassName = 'ngx-file-drop__drop-zone';\r\n        this.useDragEnter = false;\r\n        this.contentClassName = 'ngx-file-drop__content';\r\n        this.showBrowseBtn = false;\r\n        this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n        this.browseBtnLabel = 'Browse files';\r\n        this.onFileDrop = new EventEmitter();\r\n        this.onFileOver = new EventEmitter();\r\n        this.onFileLeave = new EventEmitter();\r\n        this.isDraggingOverDropZone = false;\r\n        this.globalDraggingInProgress = false;\r\n        this.files = [];\r\n        this.numOfActiveReadEntries = 0;\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n        this.dropEventTimerSubscription = null;\r\n        this._disabled = false;\r\n        this.openFileSelector = (event) => {\r\n            if (this.fileSelector && this.fileSelector.nativeElement) {\r\n                this.fileSelector.nativeElement.click();\r\n            }\r\n        };\r\n        this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt) => {\r\n            this.globalDraggingInProgress = true;\r\n        });\r\n        this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt) => {\r\n            this.globalDraggingInProgress = false;\r\n        });\r\n    }\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = (value != null && `${value}` !== 'false');\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n            this.dropEventTimerSubscription = null;\r\n        }\r\n        this.globalDragStartListener();\r\n        this.globalDragEndListener();\r\n        this.files = [];\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n    }\r\n    onDragOver(event) {\r\n        if (this.useDragEnter) {\r\n            this.preventAndStop(event);\r\n            if (event.dataTransfer) {\r\n                event.dataTransfer.dropEffect = 'copy';\r\n            }\r\n        }\r\n        else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }\r\n    }\r\n    onDragEnter(event) {\r\n        if (!this.isDropzoneDisabled() && this.useDragEnter) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    onDragLeave(event) {\r\n        if (!this.isDropzoneDisabled()) {\r\n            if (this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = false;\r\n                this.onFileLeave.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    dropFiles(event) {\r\n        if (!this.isDropzoneDisabled()) {\r\n            this.isDraggingOverDropZone = false;\r\n            if (event.dataTransfer) {\r\n                let items;\r\n                if (event.dataTransfer.items) {\r\n                    items = event.dataTransfer.items;\r\n                }\r\n                else {\r\n                    items = event.dataTransfer.files;\r\n                }\r\n                this.preventAndStop(event);\r\n                this.checkFiles(items);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param Event event\r\n     */\r\n    uploadFiles(event) {\r\n        if (!this.isDropzoneDisabled()) {\r\n            if (event.target) {\r\n                const items = event.target.files || [];\r\n                this.checkFiles(items);\r\n                this.resetFileInput();\r\n            }\r\n        }\r\n    }\r\n    checkFiles(items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            let entry = null;\r\n            if (this.canGetAsEntry(item)) {\r\n                entry = item.webkitGetAsEntry();\r\n            }\r\n            if (!entry) {\r\n                if (item) {\r\n                    const fakeFileEntry = {\r\n                        name: item.name,\r\n                        isDirectory: false,\r\n                        isFile: true,\r\n                        file: (callback) => callback(item),\r\n                    };\r\n                    const toUpload = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\r\n                    this.addToQueue(toUpload);\r\n                }\r\n            }\r\n            else {\r\n                if (entry.isFile) {\r\n                    const toUpload = new NgxFileDropEntry(entry.name, entry);\r\n                    this.addToQueue(toUpload);\r\n                }\r\n                else if (entry.isDirectory) {\r\n                    this.traverseFileTree(entry, entry.name);\r\n                }\r\n            }\r\n        }\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n        }\r\n        this.dropEventTimerSubscription = timer(200, 200)\r\n            .subscribe(() => {\r\n            if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n                const files = this.files;\r\n                this.files = [];\r\n                this.onFileDrop.emit(files);\r\n            }\r\n        });\r\n    }\r\n    traverseFileTree(item, path) {\r\n        if (item.isFile) {\r\n            const toUpload = new NgxFileDropEntry(path, item);\r\n            this.files.push(toUpload);\r\n        }\r\n        else {\r\n            path = path + '/';\r\n            const dirReader = item.createReader();\r\n            let entries = [];\r\n            const readEntries = () => {\r\n                this.numOfActiveReadEntries++;\r\n                dirReader.readEntries((result) => {\r\n                    if (!result.length) {\r\n                        // add empty folders\r\n                        if (entries.length === 0) {\r\n                            const toUpload = new NgxFileDropEntry(path, item);\r\n                            this.zone.run(() => {\r\n                                this.addToQueue(toUpload);\r\n                            });\r\n                        }\r\n                        else {\r\n                            for (let i = 0; i < entries.length; i++) {\r\n                                this.zone.run(() => {\r\n                                    this.traverseFileTree(entries[i], path + entries[i].name);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // continue with the reading\r\n                        entries = entries.concat(result);\r\n                        readEntries();\r\n                    }\r\n                    this.numOfActiveReadEntries--;\r\n                });\r\n            };\r\n            readEntries();\r\n        }\r\n    }\r\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     */\r\n    resetFileInput() {\r\n        if (this.fileSelector && this.fileSelector.nativeElement) {\r\n            const fileInputEl = this.fileSelector.nativeElement;\r\n            const fileInputContainerEl = fileInputEl.parentElement;\r\n            const helperFormEl = this.getHelperFormElement();\r\n            const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n            // Just a quick check so we do not mess up the DOM (will never happen though).\r\n            if (fileInputContainerEl !== helperFormEl) {\r\n                // Insert the form input placeholder in the DOM before the form input element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n                // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n                this.renderer.appendChild(helperFormEl, fileInputEl);\r\n                // Reset the form, thus clearing the input element of any files.\r\n                helperFormEl.reset();\r\n                // Add the file input back to the DOM in place of the file input placeholder element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n                // Remove the input placeholder from the DOM\r\n                this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     */\r\n    getHelperFormElement() {\r\n        if (!this.helperFormEl) {\r\n            this.helperFormEl = this.renderer.createElement('form');\r\n        }\r\n        return this.helperFormEl;\r\n    }\r\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     */\r\n    getFileInputPlaceholderElement() {\r\n        if (!this.fileInputPlaceholderEl) {\r\n            this.fileInputPlaceholderEl = this.renderer.createElement('div');\r\n        }\r\n        return this.fileInputPlaceholderEl;\r\n    }\r\n    canGetAsEntry(item) {\r\n        return !!item.webkitGetAsEntry;\r\n    }\r\n    isDropzoneDisabled() {\r\n        return (this.globalDraggingInProgress || this.disabled);\r\n    }\r\n    addToQueue(item) {\r\n        this.files.push(item);\r\n    }\r\n    preventAndStop(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n}\nNgxFileDropComponent.ɵfac = function NgxFileDropComponent_Factory(t) { return new (t || NgxFileDropComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nNgxFileDropComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxFileDropComponent, selectors: [[\"ngx-file-drop\"]], contentQueries: function NgxFileDropComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxFileDropContentTemplateDirective, 5, TemplateRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n    } }, viewQuery: function NgxFileDropComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileSelector = _t.first);\n    } }, inputs: { accept: \"accept\", directory: \"directory\", multiple: \"multiple\", dropZoneLabel: \"dropZoneLabel\", dropZoneClassName: \"dropZoneClassName\", useDragEnter: \"useDragEnter\", contentClassName: \"contentClassName\", showBrowseBtn: \"showBrowseBtn\", browseBtnClassName: \"browseBtnClassName\", browseBtnLabel: \"browseBtnLabel\", disabled: \"disabled\" }, outputs: { onFileDrop: \"onFileDrop\", onFileOver: \"onFileOver\", onFileLeave: \"onFileLeave\" }, decls: 7, vars: 15, consts: [[3, \"className\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\"], [3, \"className\"], [\"type\", \"file\", 1, \"ngx-file-drop__file-input\", 3, \"accept\", \"multiple\", \"change\"], [\"fileSelector\", \"\"], [\"defaultContentTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"ngx-file-drop__drop-zone-label\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ngx-file-drop__drop-zone-label\"], [\"type\", \"button\", 3, \"className\", \"value\", \"click\"]], template: function NgxFileDropComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"drop\", function NgxFileDropComponent_Template_div_drop_0_listener($event) { return ctx.dropFiles($event); })(\"dragover\", function NgxFileDropComponent_Template_div_dragover_0_listener($event) { return ctx.onDragOver($event); })(\"dragenter\", function NgxFileDropComponent_Template_div_dragenter_0_listener($event) { return ctx.onDragEnter($event); })(\"dragleave\", function NgxFileDropComponent_Template_div_dragleave_0_listener($event) { return ctx.onDragLeave($event); });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"change\", function NgxFileDropComponent_Template_input_change_2_listener($event) { return ctx.uploadFiles($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, NgxFileDropComponent_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(6, NgxFileDropComponent_ng_template_6_Template, 0, 0, \"ng-template\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(5);\n        ɵngcc0.ɵɵclassProp(\"ngx-file-drop__drop-zone--over\", ctx.isDraggingOverDropZone);\n        ɵngcc0.ɵɵproperty(\"className\", ctx.dropZoneClassName);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"className\", ctx.contentClassName);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n        ɵngcc0.ɵɵattribute(\"directory\", ctx.directory || undefined)(\"webkitdirectory\", ctx.directory || undefined)(\"mozdirectory\", ctx.directory || undefined)(\"msdirectory\", ctx.directory || undefined)(\"odirectory\", ctx.directory || undefined);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || _r1)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(13, _c1, ctx.openFileSelector));\n    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf], styles: [\".ngx-file-drop__drop-zone[_ngcontent-%COMP%]{border:2px dotted #0782d0;border-radius:30px;height:100px;margin:auto}.ngx-file-drop__drop-zone--over[_ngcontent-%COMP%]{background-color:hsla(0,0%,57.6%,.5)}.ngx-file-drop__content[_ngcontent-%COMP%]{align-items:center;color:#0782d0;display:flex;height:100px;justify-content:center}.ngx-file-drop__drop-zone-label[_ngcontent-%COMP%]{text-align:center}.ngx-file-drop__file-input[_ngcontent-%COMP%]{display:none}\"] });\r\nNgxFileDropComponent.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: Renderer2 }\r\n];\r\nNgxFileDropComponent.propDecorators = {\r\n    accept: [{ type: Input }],\r\n    directory: [{ type: Input }],\r\n    multiple: [{ type: Input }],\r\n    dropZoneLabel: [{ type: Input }],\r\n    dropZoneClassName: [{ type: Input }],\r\n    useDragEnter: [{ type: Input }],\r\n    contentClassName: [{ type: Input }],\r\n    showBrowseBtn: [{ type: Input }],\r\n    browseBtnClassName: [{ type: Input }],\r\n    browseBtnLabel: [{ type: Input }],\r\n    onFileDrop: [{ type: Output }],\r\n    onFileOver: [{ type: Output }],\r\n    onFileLeave: [{ type: Output }],\r\n    contentTemplate: [{ type: ContentChild, args: [NgxFileDropContentTemplateDirective, { read: TemplateRef },] }],\r\n    fileSelector: [{ type: ViewChild, args: ['fileSelector', { static: true },] }],\r\n    disabled: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxFileDropComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-file-drop',\n                template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n                styles: [\".ngx-file-drop__drop-zone{border:2px dotted #0782d0;border-radius:30px;height:100px;margin:auto}.ngx-file-drop__drop-zone--over{background-color:hsla(0,0%,57.6%,.5)}.ngx-file-drop__content{align-items:center;color:#0782d0;display:flex;height:100px;justify-content:center}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }]; }, { accept: [{\n            type: Input\n        }], directory: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], dropZoneLabel: [{\n            type: Input\n        }], dropZoneClassName: [{\n            type: Input\n        }], useDragEnter: [{\n            type: Input\n        }], contentClassName: [{\n            type: Input\n        }], showBrowseBtn: [{\n            type: Input\n        }], browseBtnClassName: [{\n            type: Input\n        }], browseBtnLabel: [{\n            type: Input\n        }], onFileDrop: [{\n            type: Output\n        }], onFileOver: [{\n            type: Output\n        }], onFileLeave: [{\n            type: Output\n        }], disabled: [{\n            type: Input\n        }], contentTemplate: [{\n            type: ContentChild,\n            args: [NgxFileDropContentTemplateDirective, { read: TemplateRef }]\n        }], fileSelector: [{\n            type: ViewChild,\n            args: ['fileSelector', { static: true }]\n        }] }); })();\n\nclass NgxFileDropModule {\r\n}\nNgxFileDropModule.ɵfac = function NgxFileDropModule_Factory(t) { return new (t || NgxFileDropModule)(); };\nNgxFileDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxFileDropModule, bootstrap: function () { return [NgxFileDropComponent]; } });\nNgxFileDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxFileDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxFileDropComponent,\n                    NgxFileDropContentTemplateDirective,\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    NgxFileDropComponent,\n                    NgxFileDropContentTemplateDirective,\n                ],\n                providers: [],\n                bootstrap: [\n                    NgxFileDropComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxFileDropModule, { declarations: function () { return [NgxFileDropComponent, NgxFileDropContentTemplateDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxFileDropComponent, NgxFileDropContentTemplateDirective]; } }); })();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule };\n\n//# sourceMappingURL=ngx-file-drop.js.map"],"sourceRoot":"webpack:///"}